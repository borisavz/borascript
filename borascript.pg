Program: procedures=Procedures;

Procedures: Procedure+;

Procedure: type=ReturnType name=identifier '(' params=Parameters ')' '{' statements=Statements '}';

ReturnType: 'void' | Type;

Type: 'int' | 'string' | 'bool';

Parameters: Parameter*[comma];

Parameter: type=Type name=identifier;

Statements: Statement*;

Statement: Declaration | Assignment | ProcedureCallStatement | Return;

Declaration: type=Type name=identifier '=' rval=E1 ';';

Assignment: lval=LVal '=' rval=E1 ';';

Return: 'return' val=E1? ';';

LVal: name=identifier;

ProcedureCallStatement: procedure=ProcedureCall ';';

ProcedureCall: name=identifier '(' args=Arguments ')';

Arguments: Argument*[comma];

Argument: expr=E1;

E1: l=E1 op='^' r=E1 {right, 7}
  | l=E1 op='*' r=E1 {left, 6}
  | l=E1 op='/' r=E1 {left, 6}
  | l=E1 op='+' r=E1 {left, 5}
  | l=E1 op='-' r=E1 {left, 5}
  | l=E1 op="<" r=E1 {left, 4}
  | l=E1 op="<=" r=E1 {left, 4}
  | l=E1 op=">" r=E1 {left, 4}
  | l=E1 op=">=" r=E1 {left, 4}
  | l=E1 op="==" r=E1 {left, 3}
  | l=E1 op="!=" r=E1 {left, 3}
  | l=E1 op="&&" r=E1 {left, 2}
  | l=E1 op="||" r=E1 {left, 1}
  | op='!' r=E1
  | num=number
  | bool=Bool
  | id=identifier
  | proc=ProcedureCall
  | '(' expr=E1 ')';

Bool: 'true' | 'false';

terminals
number: /\d+(\.\d+)?/;
identifier: /[a-zA-Z][a-zA-Z0-9_]*/;
comma: /[,]/;
semicolon: /[;]/;
ID: /\w+/;
INT: /\d+/;
KEYWORD: /\w+/;